name: Nightly Build

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build_image.outputs.image }}
      tag: ${{ steps.build_image.outputs.tag }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Container Image
        id: build_image
        run: |
          IMAGE_NAME="${{ github.repository }}"
          IMAGE_TAG=$(date +'%Y%m%d%H%M%S')
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$IMAGE_TAG .
          echo "::set-output name=image::$IMAGE_NAME"
          echo "::set-output name=tag::$IMAGE_TAG"

      - name: Run Tests in Container
        run: |
          IMAGE_NAME="${{ github.repository }}"
          docker run --rm $IMAGE_NAME:latest sh -c "npm test"

  push_image:
    name: Push Container Image to Registry
    needs: build_and_test
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Container Image
        run: |
          IMAGE_NAME="${{ github.repository }}"
          IMAGE_TAG=${{ needs.build_and_test.outputs.tag }}
          echo "Pushing image $IMAGE_NAME:latest and $IMAGE_NAME:$IMAGE_TAG"
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$IMAGE_TAG

  notify_failure:
    name: Notify on Failure via Email
    needs: build_and_test
    if: ${{ needs.build_and_test.result == 'failure' }}
    runs-on: ubuntu-latest
    steps:
      - name: Send Failure Notification Email
        run: |
          RECIPIENT="${{ secrets.NOTIFY_EMAIL }}"
          if [ -z "$RECIPIENT" ]; then
            RECIPIENT="sgupta54@dons.usfca.edu"
          fi
          echo "Recipient email: $RECIPIENT"
          export NOTIFY_EMAIL="$RECIPIENT"
          export BUILD_REPO="${{ github.repository }}"
          
          cat << 'EOF' > send_failure_email.js
          const nodemailer = require('nodemailer');
          
          async function main() {
            let transporter = nodemailer.createTransport({
              host: 'smtp.ethereal.email',
              port: 587,
              auth: {
                user: 'nickolas27@ethereal.email',
                pass: 'sBubMvmrcWCsPRdJ88'
              }
            });
            
            let info = await transporter.sendMail({
              from: '"Nightly Build" <no-reply@example.com>',
              to: process.env.NOTIFY_EMAIL,
              subject: 'Nightly Build Failed',
              text: 'The nightly build for repository ' + process.env.BUILD_REPO + ' has failed. Please review the build logs for details.'
            });
            
            console.log('Message sent: ' + info.messageId);
            console.log('Preview URL: ' + nodemailer.getTestMessageUrl(info));
          }
          
          main().catch(console.error);
          EOF
          
          npm init -y
          npm install nodemailer
          
          node send_failure_email.js
        shell: bash
